﻿using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Refit;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {
        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}

namespace StatDNS
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIStatDNSApi : IStatDNSApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIStatDNSApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<StatDNSResponse> GetA(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetA"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetAAAA(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetAAAA"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetCERT(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetCERT"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetDHCID(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetDHCID"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetDLV(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetDLV"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetDNSKEY(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetDNSKEY"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetDS(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetDS"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetHINFO(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetHINFO"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetIPSECKEY(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetIPSECKEY"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetKX(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetKX"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetLOC(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetLOC"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetMX(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetMX"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetNAPTR(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetNAPTR"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetNS(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetNS"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetNSEC3PARAM(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetNSEC3PARAM"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetRRSIG(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetRRSIG"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetSOA(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetSOA"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetSPF(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetSPF"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetSSHFP(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetSSHFP"](Client, arguments);
        }

        public virtual Task<StatDNSResponse> GetTXT(string domain)
        {
            var arguments = new object[] { domain };
            return (Task<StatDNSResponse>) methodImpls["GetTXT"](Client, arguments);
        }

    }
}


